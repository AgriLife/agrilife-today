@mixin card-link {
	a:not(.button) {
		color: $card-link-color;
		text-decoration: none;

		&:hover,
		&:focus {
			text-decoration: underline;
		}
	}
}

@mixin card {
	@include card-link;

	border: 1px solid $card-border-color {
		top: 0.5rem solid $card-border-color;
	}
	background: $white;
	padding: $card-padding;
	margin-bottom: $global-layout-space;

	&:last-of-type {
		margin-bottom: 0;
	}

	&.card-no-padding {
		padding: 0;
	}

	.card-heading {
		line-height: 1;
		padding: $global-layout-space / 2.5 $global-layout-space;
		margin-bottom: $global-layout-space;
		border-left: 1px solid $dark-gray;
	}

	h3,
	h4 {
		&.small {
			color: $card-link-color;
			font-size: 1.25rem;
			line-height: 1.1;
			text-transform: none;
			letter-spacing: 0;

			@include breakpoint(medium) {
				font-size: 1rem;
			}
		}
	}

	&.invert {
		border-color: $light-blue;
		background-color: transparent;
		color: $white;
	}
}

/// Create brackets on opposite sides of an element
///
/// @param {Color} $color [$dark-blue] - CSS color value
/// @param {Number} $border-width [1px] - Width of the bracket line
/// @param {Number} $width [10px] - Length of the bracket arms
/// @param {String} $axis [x] - If 'x' the brackets will appear on the left and right;
///                             if 'y' they will appear above and below
/// @param {Number} $padding [rem-calc(10 20)] - Padding of the element which ensures its contents
///                                              are far enough away from the brackets
@mixin brackets (
	$color: $dark-blue,
	$border-width: 1px,
	$width: 10px,
	$axis: x,
	$padding: rem-calc(10 20)
) {
	position: relative;
	padding: $padding;

	&::before,
	&::after {
		flex: 0 0 auto;
		content: "";
		display: block;
		position: absolute;
		border: {
			color: $color;
			style: solid;
		}

		@if $axis == x {
			top: 0;
			height: 100%;
			width: $width;
		}
		@if $axis == y {
			left: 0;
			height: $width;
			width: 100%;
		}
	}

	&::before {
		@if $axis == x {
			left: 0;
			border-width: $border-width 0 $border-width $border-width;
		}
		@if $axis == y {
			top: 0;
			border-width: $border-width $border-width 0 $border-width;
		}
	}

	&::after {
		@if $axis == x {
			right: 0;
			border-width: $border-width $border-width $border-width 0;
		}
		@if $axis == y {
			bottom: 0;
			border-width: 0 $border-width $border-width $border-width;
		}
	}

	@include breakpoint(small only) {
		padding: $width $width * 2;
	}
}

@mixin bracket-color ($color: $dark-blue) {
	&::before,
	&::after {
		border-color: $color;
	}
}

@mixin simple-arrow-up() {
	&::after {
		transform: rotate(-45deg) translate(-.07rem, 0);
	}
}

@mixin simple-arrow ( $color: $white, $direction: down ) {
	&::after {
		content: "";
		display: inline-block;
		width: .5rem;
		height: .5rem;
		border: 2px solid $white;
		border-width: 2px 2px 0 0;
		margin-left: .7rem;
		transform-origin: 50% 50% 0;
		@if $direction == up {
			transform: rotate(-45deg) translate(-.07rem, 0);
		} @else {
			transform: rotate(135deg) translate(-.1rem, .1rem);
		}
	}
}
